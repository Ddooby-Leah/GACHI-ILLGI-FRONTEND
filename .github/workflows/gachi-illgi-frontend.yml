# 필요한 Repo Secret 설정
#### CI
# ${{ secrets.SUBMODULE_ACCESS_TOKEN }} : 깃허브 액세스 토큰

#### CD
# ${{ secrets.DOCKER_ID }} : 도커허브 id
# ${{ secrets.DOCKER_PASSWORD }} : 도커허브 pw
# ${{ secrets.REMOTE_HOST }} : 배포 서버 HOSTNAME
# ${{ secrets.REMOTE_PORT }} : 배포 서버 PORT
# ${{ secrets.REMOTE_USERNAME }} : 배포 서버 USERNAME
# ${{ secrets.REMOTE_SSH_KEY }} : 배포 서버 연결을 위한 SSH KEY

name: Frontend CI & CD

# PR 요청에 대해
on:
  pull_request:
    # 특정 브랜치만
    branches: [dev, master]
    # pr이 생성 되었을 때, 담당 유저가 등록되었을 때, PR에 코드가 머지되었을 때, 라벨이 달렸을 때 동작
    types: [opened, assigned, synchronize, labeled, reopened]
  push:
    branches: [master]

jobs:
  ###### 본문 내용과 관련 없는 Job, 빌드 테스트
  Continuous-Integration:
    env:
      # KEY - VALUE
      PR_NUMBER: ${{ github.event.pull_request.number }}
    # macos 환경에서 CI 실행 (환경은 github이 제공)
    runs-on: ubuntu-latest
    # 각 단계
    steps:
      # 소스코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v2
      - run: |
          echo "VITE_REST_API_KEY=${{secrets.REST_API_KEY}}" >> .env
          echo "VITE_REDIRECT_URI=${{secrets.REDIRECT_URI}}" >> .env

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ secrets.NODE_VERSION }}
          cache: "yarn"

      - name: Install project dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        uses: actions/setup-node@v1
        with:
          node-version: ${{ secrets.NODE_VERSION }}
      - run: yarn

      - name: Build project
        uses: actions/setup-node@v1
        with:
          node-version: ${{ secrets.NODE_VERSION }}
      - run: yarn run build

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: dist/

  Continuous-Deploy:
    # master 브랜치에 push 하는 경우에만 배포 JOB 실행
    if: github.event_name == 'push' && contains(github.ref, 'master')
    needs: Continuous-Integration
    runs-on: ubuntu-latest
    steps:
      # 소스코드 가져오기
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Download a build File
        uses: actions/download-artifact@v1
        with:
          name: build

      # Docker Buildx Setting
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Docker Login
      - name: Docker Login
        uses: docker/login-action@v2.1.0
        with:
          # Username used to log against the Docker registry
          username: ${{ secrets.DOCKER_ID }}
          # Password or personal access token used to log against the Docker registry
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker Build & Push
      - name: Docker Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKER_ID }}/gachi-illgi-frontend:latest
          cache-from: type=gha # gha=Github Action Cache
          cache-to: type=gha,mode=max

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          port: ${{ secrets.REMOTE_PORT }}
          username: ${{ secrets.REMOTE_USERNAME }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          script: |
            sudo docker rm -f gachi-frontend
            sudo docker rmi qkdrmsgh73/gachi-illgi-frontend
            sudo docker pull ${{ secrets.DOCKER_ID }}/gachi-illgi-frontend:latest
            sudo docker run -d -p 80:80 --restart=unless-stopped --log-opt max-size=10m --log-opt max-file=3 --name gachi-frontend qkdrmsgh73/gachi-illgi-frontend
            sudo docker rmi -f $(docker images -f "dangling=true" -q) || true
